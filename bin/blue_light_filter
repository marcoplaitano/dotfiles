#!/bin/bash

# File:   blue_light_filter
# Author: Marco Plaitano
# Brief:  Toggle blue light filter with redshift.


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

_help() {
    printf "Usage: $(basename "$0") [OPTION]...
Toggle blue light filer on all displays with redshift utility.

-h, --help          Show this guide and exit.
--status            Print current status: on, off.
--off
--on                (default)
--toggle
"
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local PIDFILE
    PIDFILE="/tmp/$(basename $0).pid"
    if [[ -f "$PIDFILE" ]]; then
        pid=$(cat "$PIDFILE")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$PIDFILE"
}


_turn_off() {
    killall -q redshift
}

_turn_on() {
    local location
    location=$(curl -s "https://location.services.mozilla.com/v1/geolocate?key=geoclue" \
        | sed 's/.*"lat": \([0-9.]*\).*"lng": \([0-9.]*\).*/\1:\2/')
    redshift -l "$location" &>/dev/null & disown
}

_toggle() {
    if [[ $(_get_status) == on ]]; then
        _turn_off
    else
        _turn_on
    fi
}

# Check whether filter is currently on.
_get_status() {
    if [[ -n $(pgrep redshift) ]]; then
        echo on
    else
        echo off
    fi
}


_check_pid

if ! command -v redshift &>/dev/null; then
    _die "redshift is not installed."
fi

# Parse command line arguments.
while [[ -n $1 ]]; do
    case "$1" in
        -h | --help)
            _help
            exit ;;
        --status)
            _get_status
            exit ;;
        --on | --off | --toggle)
            flag="${1#*--}"
            shift ;;
        *)
            _die "Argument '$1' not recognized." ;;
    esac
done

# Default action is turn on.
[[ -z $flag ]] && flag=on

# Do not apply if the current state is already the desired one.
status=$(_get_status)
[[ $status == on  && $flag == on ]]  && exit
[[ $status == off && $flag == off ]] && exit

# Execute action.
case "$flag" in
    on)     _turn_on ;;
    off)    _turn_off ;;
    toggle) _toggle ;;
esac
