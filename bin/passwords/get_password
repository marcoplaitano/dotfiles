#!/bin/bash

# File:   get_password
# Author: Marco Plaitano
# Date:   18 Mar 2023
# Brief:  Use dmenu to select a password from the ones stored in
#         $PASSWORD_STORE_DIR and use 'pass' to decrypt it. Based on the input
#         arguments the credentials are either displayed or pasted to the
#         system's clipboard.


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

_help() {
    printf "Usage: $(basename "$0") [PASSWORD] [OPTION]
Use pass to decrypt a password file in \$PASSWORD_STORE_DIR (given or chosen via
dmenu). The info can be either be displayed or pasted to the system's clipboard.

-h, --help      Show this guide and exit.
-s, --show      Show credentials. To be used when the password isn't the only
                info that needs to be accessed.
-c, --copy      Do not display; copy password into clipboard. Default action.
PASSWORD        Name of encrypted gpg containing password to show.\n"
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local PIDFILE="/tmp/$(basename "$0").pid"
    if [[ -f "$PIDFILE" ]]; then
        pid=$(cat "$PIDFILE")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$PIDFILE"
}

_choose_pswd_file() {
    # Directory in which to look for the passwords files.
    readonly _PASSWORDS_DIR="${PASSWORD_STORE_DIR:=$HOME/.password-store}"

    [[ ! -d "$_PASSWORDS_DIR" ]] && _die "'$_PASSWORDS_DIR' is not a dir."

    # Find all GPG files in the directory, strip away the path and the extension
    # from their names. Add all of the items found to a single, long string
    # separated by \n (for dmenu).
    pushd "$_PASSWORDS_DIR" >/dev/null
    passwords=""
    for pswd_file in $(find . -maxdepth 2 -type f -name '*.gpg' | sort -n); do
        pswd_file=${pswd_file#\./}
        pswd_file=${pswd_file%.*}
        passwords+="${pswd_file}\n"
    done
    popd >/dev/null
    # Remove trailing newline.
    passwords=${passwords::-2}

    # Use dmenu to choose which password to see.
    echo $(ask_dmenu -F -l "$passwords")
}


_check_pid

# Parse command line arguments.
while [[ -n $1 ]]; do
    case "${1,,}" in
        -h | --help)
            _help ; exit ;;
        -s | --show)
            show=1 ;;
        -c | --copy) ;;
        *)
            pswd_file="$1" ;;
    esac
    shift
done

# If no password as been given in input ask for one via dmenu.
[[ -z $pswd_file ]] && pswd_file=$(_choose_pswd_file)
[[ -z $pswd_file ]] && exit

# Ask for a GUI pinentry program since this script is probably not run from a
# terminal.
[[ $TERM == dumb ]] && export PINENTRY_USER_DATA="gui"
# Only add -c option (paste into clipboard) if the user did not ask for "show".
[[ -z $show ]] && options="-c"
if ! pass show "$pswd_file" $options ; then
    _die "Error in retrieving password."
fi

# Notify user of success if this script is not called from a terminal.
[[ $TERM == dumb ]] && notify-send "Pasted '$pswd_file' password to clipboard."
