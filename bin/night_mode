#!/bin/bash

# File:   night_mode
# Author: Marco Plaitano
# Brief:  Toggle blue light filter and dark mode.


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

_help() {
    printf "Usage: $(basename "$0") [OPTION]
Toggle night mode across the system. It consists of enabling dark theme and
starting redshift (blue light filter).
Default action (when no option is given) is to toggle it based on the current
time of day.

-h, --help      Show this guide and exit.
--status        Print current status: on, off.
--on
--off
--toggle
"
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local PIDFILE
    PIDFILE="/tmp/$(basename $0).pid"
    if [[ -f "$PIDFILE" ]]; then
        pid=$(cat "$PIDFILE")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$PIDFILE"
}

_turn_off() {
    _set_status off
    dark_theme --off
    blue_light_filter --off
}

_turn_on() {
    _set_status on
    dark_theme --on
    blue_light_filter --on
}

_toggle() {
    if [[ $(_get_status) == off ]]; then
        _turn_on
    else
        _turn_off
    fi
}

_get_status() {
    if [[ $(dark_theme --status) == on && $(blue_light_filter --status) == on ]]
    then
        echo on
        return
    fi
    local status
    status=$(cat "$_STATUS_FILE" 2>/dev/null)
    if [[ -n $status ]]; then
        echo $status
    else
        echo off
    fi
}

_set_status() {
    echo "$1" > "$_STATUS_FILE"
}


_check_pid

readonly _STATUS_FILE="$HOME/.config/user/nightmode"
readonly _BEGIN_TIME="17:00"
readonly _END_TIME="07:00"

# Parse command line arguments.
case "$1" in
    '') ;;
    -h|--help)
        _help ; exit ;;
    --status)
        _get_status ; exit ;;
    --off | --on | --toggle)
        flag="${1#*--}" ;;
    *)
        _die "Argument '$1' not recognized." ;;
esac

# Default action is to toggle based on time of day.
if [[ -z $flag ]]; then
    curr_time="$(date +%H:%M)"
    if [[ ! $curr_time < $_BEGIN_TIME ]] || [[ ! $curr_time > $_END_TIME ]]
    then
        flag=on
    else
        flag=off
    fi
fi

# Do not apply if the current state is already the desired one.
status=$(_get_status)
[[ $status == on  && $flag == on ]]  && exit
[[ $status == off && $flag == off ]] && exit

# Execute action.
case "$flag" in
    on)     _turn_on ;;
    off)    _turn_off ;;
    toggle) _toggle ;;
esac
