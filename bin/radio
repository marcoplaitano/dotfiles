#!/bin/bash

# File:   radio
# Author: Marco Plaitano
# Brief:  With this script the user can select a radio station and it will start
#         playing via audio streaming.
#         No output will be printed to stdout because, ideally, the script is
#         launched via menu.


declare -A radioURLs=(
    ["Capital"]="https://streamcdnr8-4c4b867c89244861ac216426883d1ad0.msvdn.net/radiocapital/radiocapital/master_ma.m3u8"
    ["Deejay"]="http://radiodeejay-lh.akamaihd.net/i/RadioDeejay_Live_1@189857/master.m3u8"
    ["Montecarlo"]="http://edge.radiomontecarlo.net/RMC.mp3"
    ["Pooh"]="https://rtr99.fluidstream.eu/rtr99_pooh.mp3"
    ["RDS Relax"]="https://stream.rds.radio/audio/rdsrelax.stream_aac/playlist.m3u8"
    ["RTL"]="https://streamingv2.shoutcast.com/rtl-1025"
    ["RTL Best"]="https://streamingv2.shoutcast.com/rtl-1025-best"
    ["Virgin"]="http://icecast.unitedradio.it/Virgin.mp3"
)


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

_help() {
    printf "Usage: $(basename "$0") STATION
Play radio station.

-h, --help      Show this guide and exit.
-l, --list      List all available radio stations.
STATION         Station to play. If not given it will be asked via dmenu.\n"
}

_list_radio_stations() {
    for name in "${!radioURLs[@]}"; do
        echo "$name"
    done | sort
}

_play_radio() {
    local url="$1"
    [[ -z $url ]] && exit 1

    ffplay -autoexit -nodisp -loglevel quiet $url &>/dev/null & disown

    # Check that it is actually playing.
    sleep 3
    if ! pgrep ffplay; then
        _die "Could not play station '$station'."
    fi
}

_record_status() {
    echo "$1" > "$STATUS_FILE_RADIO"
}


# Parse command line arguments.
case "$1" in
    -h | --help)
        _help ; exit ;;
    -l | --list)
        _list_radio_stations ; exit ;;
    *)
        station="$1" ;;
esac


# Sort the keys of the dictionary in alphabetical order, and add all of them
# to a string, separating them with \n. (needed for dmenu)
choices=$(for name in "${!radioURLs[@]}"; do
    echo "$name"
done | sort | sed ':a;N;$!ba;s/\n/\\n/g')
# Add also an option to stop playing the stream.
choices+="\nSTOP"

# If no argument is given use dmenu to ask the user which station to play.
if [[ -z $station ]]; then
    station=$(ask_dmenu -p "station:" -l "$choices")
fi
[[ -z $station ]] && exit


if [[ $station == STOP ]]; then
    kill_process radio
elif [[ -v radioURLs[$station] ]]; then
    kill_process radio music lofi
    _record_status "${station^}"
    _play_radio "${radioURLs[$station]}"
else
    _die "Station '$station' not recognized."
fi
