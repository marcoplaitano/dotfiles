#!/bin/bash

# File:   ask_dmenu
# Author: Marco Plaitano
# Brief:  Run dmenu with the the given options and colors.
# See:    menu


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local PIDFILE="/tmp/$(basename "$0").pid"
    if [[ -f "$PIDFILE" ]]; then
        pid=$(cat "$PIDFILE")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$PIDFILE"
}

_check_pid


################################################################################
###  DMENU APPEARANCE
################################################################################

font="NotoSansRegular-12"

# Height in pixels.
height="26"

# Sourcing this to get fuzzy highlight default colors in case the current theme
# does not have them.
source "$DOTS_DIR/_other/colors/dmenu/default.sh"
source "$THEME_FILE_DMENU"


################################################################################
###  PARSE OPTIONS
################################################################################

# Parse command line arguments.
while [[ -n $1 ]]; do
    case "$1" in
        # Prompt to display.
        -p | --prompt)
            prompt="$2"
            shift ;;
        # List of choices.
        -l | --list)
            list="$2"
            shift ;;
        # Display each option on its line.
        --multiple-lines)
            multiple_lines=1 ;;
        # Display exactly N lines.
        -nl | --num-lines)
            lines=$2
            shift ;;
        # Accept all user input.
        --accept-all)
            accept_all=1 ;;
        # Use fuzzy match.
        -F | --fuzzy)
            fuzzy="-F" ;;
        -P | --password)
            password="-P"
            # Use monospaced font when inserting passwords so that the cursor
            # will not shift from the * (character used to hide actual letters)
            # because some characters are larger and other thinner.
            font="monospace-12" ;;
        *)
            _die "Argument '$1' not recognized." ;;
    esac
    shift
done

lines=${lines:=0}
# If requested, calculate the number of lines in the list string.
if [[ -n $multiple_lines ]] && [[ $lines -eq 0 ]]; then
    lines=$(echo -e "$list" | wc -l)
fi

# Default values.
prompt=${prompt:="choose:"}

options="$fuzzy $password -i -h $height -fn $font -nb $nb -nf $nf \
         -sb $sb -sf $sf -nhb $nhb -nhf $nhf -shb $shb -shf $shf "

# Only center dmenu when using tiling window manager.
if pgrep -x picom &>/dev/null; then
    lines=10
    prompt=""
    options+=" -c -bw 2 -a "
else lines=10 ; prompt="" ; options+=" -c "
fi

options+=" -l $lines "


################################################################################
###  LAUNCH DMENU
################################################################################

# Ask for any input.
if [[ -n $accept_all ]]; then
    echo $(dmenu -p "$prompt" $options)

# Launch regular dmenu (with a list of all system applications).
elif [[ -z $list ]]; then
    dmenu_path | dmenu -p "$prompt" $options | ${SHELL:-"/bin/sh"} &

# Ask for a choice from the given list.
else
    echo $(echo -e "$list" | dmenu -p "$prompt" $options)
fi
