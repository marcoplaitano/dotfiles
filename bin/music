#!/bin/bash

# File:   music
# Author: Marco Plaitano
# Date:   29 Jan 2023
# Brief:  Play music from local files.
# TODO:
#   - accept arguments: album or play all.

set -u


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}


# DO NOT CALL THIS FUNCTION.
create_discography_file() {
    [[ -z "$CACHE_FILE_MUSIC" ]] && _die "No discography file specified."
    [[ -f "$CACHE_FILE_MUSIC" ]] && _die "Discography file already exists."
    exit
    > "$CACHE_FILE_MUSIC"

    IFS=$'\n'
    for path in $(find "$MUSIC_ROOT_DIR" -mindepth 1 -maxdepth 3 -type d -links 2); do
        album="$(basename "$path")"
        album=$(echo $album | sed "s/L_/L'/")
        album=$(echo $album | sed "s/D_/D'/")
        album=$(echo $album | sed "s/Dell_/Dell'/")
        album=$(echo $album | sed "s/c_/c'/")
        album=$(echo $album | tr '_' ' ')
        albums_dict+=(["$album"]="$path")
        albums+=" $album"
        echo "$album","$path" >> "$CACHE_FILE_MUSIC"
    done
}



readonly MUSIC_ROOT_DIR="$HOME/Music"


if [[ ! -f "$CACHE_FILE_MUSIC" ]]; then
    _die "Discography file does not exist."
fi


# String containing list of options (albums, artits) the user can choose
# from. The pipe symbol is used as separator to allow spaces in the names.
albums="Tutto"
# Dictionary mapping albums strings to their path.
declare -A albums_dict=(
    ["Tutto"]="."
)

# Read list of albums and their path.
while IFS="," read -r title path; do
    albums+="|$title"
    albums_dict+=(["$title"]="$path")
done < "$CACHE_FILE_MUSIC"


# Ask the user to choose one of the albums either via FZF or DMENU.
if [[ $TERM != dumb ]]; then
    options="-p "
    options+=$(get_fzf_colors)
    album=$(echo "$albums" | tr '|' '\n' | fzf-tmux $options --prompt="album to play: ")
else
    albums="$(echo $albums | tr '|' '\n')"
    album=$(ask_dmenu -p "album:" -l "$albums" --num-lines 15)
fi

[[ -z $album ]] && exit


# Check that the choice is valid.
path="${albums_dict[$album]}"
if [[ -z $path ]]; then
    _die "Album '$album' not found"
fi
if [[ ! -d "$MUSIC_ROOT_DIR/$path" ]]; then
    _die "Path to album '$MUSIC_ROOT_DIR/$path' not found."
fi


kill_process radio music lofi

case ${album,,} in
    *" - "*)
        cvlc --no-random --loop "$MUSIC_ROOT_DIR/$path" &>/dev/null & disown ;;
    # Only play random order when no precise album has been selected.
    *)
        cvlc --random --loop "$MUSIC_ROOT_DIR/$path" &>/dev/null & disown ;;
esac
