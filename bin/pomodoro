#!/bin/bash

# File:   pomodoro
# Author: Marco Plaitano
# Brief:  Run a Pomodoro Timer to alternate work sprints with small pauses.
#         https://en.wikipedia.org/wiki/Pomodoro_Technique


################################################################################
###  VARIABLES
################################################################################

# Number of minutes for each slice.
readonly _TIME_FOCUS=25
readonly _TIME_PAUSE=5
readonly _TIME_LONG_PAUSE=20

# Number of Focus slices to complete before a Long Pause is earned.
readonly _NUM_ITERATIONS=3

# Which color to tint the text with, based on the current slice.
readonly _COLOR_FOCUS="\e[01;31m"   # red
readonly _COLOR_PAUSE="\e[01;32m"   # green
readonly _COLOR_RESET="\e[00m"      # default

# Notification sound to play when a new slice begins.
# (yes, they are the same but this makes it easy to replace one of them)
readonly _SOUND_FOCUS="/usr/share/sounds/freedesktop/stereo/complete.oga"
readonly _SOUND_PAUSE="/usr/share/sounds/freedesktop/stereo/complete.oga"


################################################################################
###  FUNCTIONS
################################################################################

_die() {
    [[ -n $1 ]] && echo "$1" >&2
    exit 1
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local PIDFILE="/tmp/$(basename "$0").pid"
    if [[ -f "$PIDFILE" ]]; then
        pid=$(cat "$PIDFILE")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$PIDFILE"
}

_safe_exit() {
    # Delete any output.
    printf "\r"
    clear
    # Unblock social media.
    block_socialmedia --unblock --now &>/dev/null
    # Turn cursor blinking back on.
    tput cnorm
    exit
}

_read_input() {
    # Wait 1 second for 1 key press. (no need to send the input with ENTER)
    read -t 1 -rs -N 1 && {
        case "${REPLY,}" in
            # Q = exit the script
            q)
                _safe_exit ;;
            # S = set variable to notify the main loop to skip the current slice
            s)
                skip_slice=true ;;
            # SPACE = pause or resume the timer
            ' ')
                [[ $is_paused == false ]] && is_paused=true || is_paused=false ;;
        esac
    }
}


################################################################################
###  SETUP
################################################################################

# Redirect any signal that might stop the timer to the _safe_exit function.
trap "_safe_exit" SIGINT SIGQUIT SIGTERM

# Make sure that the script won't be executed more than once at a time.
_check_pid

# Hide the cursor.
tput civis


################################################################################
###  MAIN LOOP
################################################################################

slice="FOCUS"
iteration=1
is_paused=false

while [ : ]; do
    ############################# CONFIGURE SLICE ##############################
    # Configure current slice with the correct lasting time and output color.
    case "$slice" in
        FOCUS)
            color=$_COLOR_FOCUS ; time_slice=$_TIME_FOCUS ;;
        PAUSE)
            color=$_COLOR_PAUSE ; time_slice=$_TIME_PAUSE ;;
        LONG_PAUSE)
            color=$_COLOR_PAUSE ; time_slice=$_TIME_LONG_PAUSE ;;
    esac

    # Block social media when starting FOCUS, unblock them during PAUSES.
    if [[ $slice == "FOCUS" ]]; then
        block_socialmedia --block
    else
        block_socialmedia --unblock --now
    fi
    ############################################################################

    ############################# COUNTDOWN ####################################
    # Timestamp at which the timer should stop.
    time_end=$(($(date +%s) + time_slice * 60))

    # Show info.
    clear
    printf "SPACE  pause/resume\n    S  skip slice\n    Q  quit\n\n"
    printf "$color$slice  $iteration/$_NUM_ITERATIONS $_COLOR_RESET\n"

    while [[ $time_end -ge $(date +%s) ]]; do
        # Show remaining time.
        if [[ $is_paused == false ]]; then
            printf "$(date -d @$((time_end - $(date +%s))) +%M:%S)       \r"
        else
            printf "$(date -d @$((time_end - $(date +%s))) +%M:%S) PAUSED\r"
            # Pause the timer by adding 1 second to the end time, every second.
            time_end=$((time_end + 1))
        fi

        # Wait 1 second listening for key presses.
        _read_input

        # Variable set in the function above.
        if [[ -n $skip_slice ]]; then
            unset skip_slice
            break
        fi
    done
    ############################################################################

    ############################# END SLICE ####################################
    # FOCUS ended. Start PAUSE
    if [[ $slice == "FOCUS" ]]; then
        slice="PAUSE"
        paplay "$_SOUND_PAUSE" &
        notify-send "üçÖ Pomodoro" "Take a break!"
    # PAUSE ended. Start FOCUS or LONG_PAUSE
    else
        if [[ $iteration -ge $_NUM_ITERATIONS ]]; then
            slice="LONG_PAUSE"
            iteration=0
        else
            slice="FOCUS"
            iteration=$((iteration + 1))
            paplay "$_SOUND_FOCUS" &
            notify-send "üçÖ Pomodoro" "Time to focus!"
        fi
    fi
    ############################################################################
done
